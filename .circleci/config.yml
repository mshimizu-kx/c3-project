version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build3]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # Build phase
            cd frontend
            npm i
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules
            - project/frontend/dist
      #- save_cache:
      #    paths: [frontend/node_modules, frontend/dist]
      #    key: frontend-build3

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [backend-build2]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # Build phase
             cd backend
             npm i
             npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules
            - project/backend/dist
      #- save_cache:
      #    paths: [backend/node_modules, backend/dist]
      #    key: backend-build2

  test-frontend:
    docker:
      # Docker image here
      # Test phase
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      # Test phase
      - checkout
      #- restore_cache:
      #    keys: [frontend-build3]
      - attach_workspace:
          at: ~/
      - run:
          name: "Run all unit tests"
          command: | 
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      # Test phase
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      # Test phase
      - checkout
      #- restore_cache:
      #    keys: [backend-build2]
      - attach_workspace:
          at: ~/
      - run:
          name: "Run all unit tests"
          command: | 
            cd backend
            npm run test
  scan-frontend:
    docker:
      # Docker image here
      # Analyze phase
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      # Analyze phase
      - checkout
      #- restore_cache:
      #    keys: [frontend-build3]
      - attach_workspace:
          at: ~/
      - run:
          name: Check vulnarability
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      # Analyze phase
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      # Analyze phase
      - checkout
      #- restore_cache:
      #    keys: [backend-build2]
      - attach_workspace:
          at: ~/
      - run:
          name: Check vulnarability
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      # Infrastructure phase
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation create-stack \
              --template-body file://.circleci/files/backend.yml \
              --tags Key=project,Value=C3 Key=category,Value=backend \
              --stack-name "prod-backend-$CIRCLE_WORKFLOW_ID" \
              --parameters ParameterKey=ID,ParameterValue="$CIRCLE_WORKFLOW_ID"  
      - run:
          name: Wait until stack is created.
          command: |
            sleep 60
      - run:
          name: Store backend URL with memstash
          command: |
            export BACKEND_URL=$(aws cloudformation list-exports --query "Exports[?Name==\`udapeople-backend-url\`].Value" --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 776ef8d6-6840-4308-bb5c-1e48824cf347" --request PUT --data "$BACKEND_URL" https://api.memstash.io/values/udapeople_backend_url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation create-stack \
              --template-body file://.circleci/files/frontend.yml \
              --tags Key=project,Value=C3 Key=category,Value=frontend \
              --stack-name "prod-frontend-$CIRCLE_WORKFLOW_ID" \
              --parameters ParameterKey=ID,ParameterValue="$CIRCLE_WORKFLOW_ID"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            # Infrastructure phase
            cat .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:category,Values=backend" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # Infrastructure phase
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      # Infrastructure phase
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:f7:f5:c6:14:2a:2d:c5:9f:e9:63:76:ce:aa:2c:ad"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # Infrastructure phase
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            # Infrastructure phase
            (yes || true) | ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt --private-key udacity.pem
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      # Deploy phase
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Deploy phase
      - checkout
      #- restore_cache:
      #    keys: [backend-build2]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # Your code here
            # Deploy phase
            cd backend
            npm run migrations >> migration.log
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            # Deploy phase
            cd backend
            if grep "has been executed successfully" migration.log
            then
              curl -H "Content-Type: text/plain" -H "token: 776ef8d6-6840-4308-bb5c-1e48824cf347" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              npm run migrations:revert
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # Deploy phase
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Deploy phase
            yum -y install tar gzip
      #- restore_cache:
      #    keys: [frontend-build3]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            # Deploy phase
            export BACKEND_IP=$(curl -H "token: 776ef8d6-6840-4308-bb5c-1e48824cf347" --request GET https://api.memstash.io/values/udapeople_backend_url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            # Deploy phase
            cd frontend
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # Deploy phase
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      # Deploy phase
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:f7:f5:c6:14:2a:2d:c5:9f:e9:63:76:ce:aa:2c:ad"
      - attach_workspace:
          at: ~/
      #- restore_cache:
      #    keys: [backend-build2]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            # Deploy phase
            cd backend
            cp -r dist/* ~/project/.circleci/ansible/roles/deploy/files/
            ls ~/project/.circleci/ansible/roles/deploy/files/
            (yes || true) | ansible-playbook ~/project/.circleci/ansible/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt --private-key ~/project/udacity.pem
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      # Smoke test phase
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Smoke test phase
            apk --no-cache add curl
      - run:
          name: Get backend url
          command: |
            # your code here
            # Smoke test phase
            export BACKEND_IP=$(curl -H "token: 776ef8d6-6840-4308-bb5c-1e48824cf347" --request GET https://api.memstash.io/values/udapeople_backend_url)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # Smoke test phase
            curl -s --head ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            # Smoke test phase
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      # Build phase
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      # Docker image here
      # Build phase
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
          # remove filter afterward
          filters:
            branches:
              only: [master]
      - test-backend:
          requires: [build-backend]
          # remove filter afterward
          filters:
            branches:
              only: [master]
      - scan-backend:
          requires: [build-backend]
          # remove filter afterward
          filters:
            branches:
              only: [master]
      - scan-frontend:
          requires: [build-frontend]
          # remove filter afterward
          filters:
            branches:
              only: [master]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]